<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('PollComment', 'doctrine');

/**
 * BasePollComment
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $poll_id
 * @property string $user_id
 * @property string $comment
 * @property integer $is_visible
 * @property timestamp $created_at
 * @property Poll $Poll
 * @property Users $Users
 * 
 * @method integer     getId()         Returns the current record's "id" value
 * @method integer     getPollId()     Returns the current record's "poll_id" value
 * @method string      getUserId()     Returns the current record's "user_id" value
 * @method string      getComment()    Returns the current record's "comment" value
 * @method integer     getIsVisible()  Returns the current record's "is_visible" value
 * @method timestamp   getCreatedAt()  Returns the current record's "created_at" value
 * @method Poll        getPoll()       Returns the current record's "Poll" value
 * @method Users       getUsers()      Returns the current record's "Users" value
 * @method PollComment setId()         Sets the current record's "id" value
 * @method PollComment setPollId()     Sets the current record's "poll_id" value
 * @method PollComment setUserId()     Sets the current record's "user_id" value
 * @method PollComment setComment()    Sets the current record's "comment" value
 * @method PollComment setIsVisible()  Sets the current record's "is_visible" value
 * @method PollComment setCreatedAt()  Sets the current record's "created_at" value
 * @method PollComment setPoll()       Sets the current record's "Poll" value
 * @method PollComment setUsers()      Sets the current record's "Users" value
 * 
 * @package    ibum
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePollComment extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('poll_comment');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('poll_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('user_id', 'string', 70, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 70,
             ));
        $this->hasColumn('comment', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('is_visible', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Poll', array(
             'local' => 'poll_id',
             'foreign' => 'id'));

        $this->hasOne('Users', array(
             'local' => 'user_id',
             'foreign' => 'id'));
    }
}